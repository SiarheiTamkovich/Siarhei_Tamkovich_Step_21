//Task 1
//Кошелёк
// На вход подаётся строка с купюрами и арифметическими знаками. Строка представлена в 
// виде: число купюра + число купюра, содержащую номинал купюры(целое число) и ее тип 
// (“бун” или “коп”, 1бун=100коп) с разделительными пробелами. Найти сумму всех купюр и
// вывести ее строкой в формате x бун и y коп, например “100бун 10коп”.

// ВНИМАНИЕ: Функция решения должна быть присвоена строго глобальной переменной solution, 
// в противном случае решение не сможет быть проверено!

solution = function (pocketStr) { 
  console.log(pocketStr)
}

solution(10)

//Task 2
//Зодиак
// Написать функцию которая определяет знак зодиака по данным астрономии, соответствующей 
// заданной дате. Функция должна принимать строку в формате ‘{дата}/{месяц}’. Пример входных 
// данных: ‘23/03’. Ожидаемый результат: 'Овен'. Таблица зодиаков: Овен 21 марта — 20 апреля
// ,,,,,,Телец 21 апреля — 21 мая,,,,,,, Близнецы 22 мая — 21 июня,,,,,, Рак 22 июня — 22 
// июля,,,,,, Лев 23 июля — 21 августа,,,,, Дева 22 августа — 23 сентября,,,,,, Весы 24 сентября 
// — 23 октября,,,,, Скорпион 24 октября — 22 ноября,,,,,, Стрелец 23 ноября — 22 декабря,,,,,, 
// Козерог 23 декабря — 20 января,,,,,, Водолей 21 января — 19 февраля,,,,,, Рыбы 20 февраля — 
// 20 марта

// ВНИМАНИЕ: Функция решения должна быть присвоена строго глобальной переменной solution, в 
// противном случае решение не сможет быть проверено!

// solution = function (dateStr) {
//   //your code here
// };

//Task 3 
//Минимальные значения
// На вход функции подается массив строк. Каждая строка состоит из чисел, разделенных пробелом. 
// Найти сумму минимальных чисел всех строк. Пример входных 
// данных: [ “1 2 22 55 63”, “2 5 0”, “3 0 0”, “99 99 99 999 99999 999 999 99”, “0 0 0 0 0”, ].
// Ожидаемый результат: 100.

// ВНИМАНИЕ: Функция решения должна быть присвоена строго глобальной переменной solution, в 
// противном случае решение не сможет быть проверено!

// solution = function (strArr) {
//   //your code here
// };

// Task 4
// Диагональные суммы
// Сложить все числа, которые ниже главной диагонали матрицы. На вход функции подается двухмерный 
// массив (массив строк матрицы), содержащий числа. Необходимо найти сумму чисел находящихся ниже 
// главной диагонали.

// ВНИМАНИЕ: Функция решения должна быть присвоена строго глобальной переменной solution, в противном
// случае решение не сможет быть проверено!

// solution = function (matrix) {
//   //your code here
// };

// Task 5 
// Sum Strings as Numbers
// Input: 2 параметра, являющихся строковым представлением целых натуральных чисел. Output: строка, 
// являющаяся арифметической суммой входных параметров. !!! BigInt использовать нельзя. Строковое 
// представление целого числа не будет содержать никаких символов, кроме десяти цифр от «0» до «9».

// ВНИМАНИЕ: Функция решения должна быть присвоена строго глобальной переменной solution, в противном 
// случае решение не сможет быть проверено!

// solution = function () {
//   //your code here
// };

// Task 6
// Сумма из одного числа
// Создайте функцию, которая принимает целое число в качестве аргумента. Сложите все числа от 1 до числа, 
// которое вы передали функции. Например, если на входе 4, ваша функция должна вернуть 10, потому 
// что 1 + 2 + 3 + 4 = 10.

// ВНИМАНИЕ: Функция решения должна быть присвоена строго глобальной переменной solution, в противном 
// случае решение не сможет быть проверено!

// solution = function (x) {
//   //your code here
// };

// Task 7
// Проверка на целое число
// Создайте функцию, которая принимает массив в качестве аргумента и возвращает true или false в зависимости 
// от того, является ли среднее всех элементов в массиве целым числом или нет. Предусмотреть валидацию на 
// некорректные данные, в расчете принимаем только элементы типа number.

// ВНИМАНИЕ: Функция решения должна быть присвоена строго глобальной переменной solution, в противном случае
//  решение не сможет быть проверено!

// solution = function (arr) {
//   //your code here
// };
